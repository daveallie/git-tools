#!/bin/sh

set -e

function pluralize {
  echo "$1 $([ "$1" -eq 1 ] && echo "$2" || echo "$3")"
}

function print_help {
  echo "Git-Tools: A small utility tool for managing branches in Git repositories.\nv1.1.0\n\nUsage:"
  echo "git-tools <tool> [options]\n"
  echo "   Tool: Clean Branches"
  echo "  Usage: git-tools clean [-n/--no-fetch] [-u/--user <user> | --me] [-m/--merge-branch <merge_branch>] [*ignore_branches]"
  echo "Example: git-tools clean -u \"John Smith\" -m develop master staging"
  echo "   Desc: Example above will identify branches merged into develop that aren't master or staging authored by 'John Smith'"
  echo "         Default merge branch is master\n"
  echo "   Tool: Old Branches"
  echo "  Usage: git-tools old [-n/--no-fetch] [-u/--user <user> | --me] [-d/--days <num_days>]"
  echo "Example: git-tools old -u \"John Smith\" -d 14"
  echo "   Desc: Example above finds remote branches that haven't had a commit in 14 days authored by 'John Smith'"
  echo "         Default is 7 days"
}

function old_branches {
  DAYS_AGO=7
  FETCH=true
  USER=""

  while [ $# -gt 0 ]; do
    KEY="$1"
    case $KEY in
        -d|--days)
          shift
          if [ $# -gt 0 ]; then
            DAYS_AGO=$1
          else
            echo "days flag needs an argument!"
            exit 1
          fi
          ;;
        -u|--user)
          shift
          if [ $# -gt 0 ]; then
            if [ -n "$USER" ]; then
              echo "user already set, please use at most one of --user/-u/--me"
              exit 1
            else
              USER=$1
            fi
          else
            echo "user flag needs an argument!"
            exit 1
          fi
          ;;
        --me)
          if [ -n "$USER" ]; then
            echo "user already set, please use at most one of --user/-u/--me"
            exit 1
          else
            USER=$(git config user.name)
          fi
          ;;
        -n|--no-fetch) FETCH=false;;
        -*) echo "Unknown flag ${KEY:1}"; exit 1;;
        *) echo "Ignored argument $KEY";;
    esac
    shift
  done

  if [ "$FETCH" = true ]; then
    echo "Fetching\n"
    git fetch -q -p
  else
    echo "Not Fetching\n"
  fi

  COMPARE_TIME=$(($(date +%s)-($DAYS_AGO * 24 * 60 * 60)))
  OUT_ARRAY=()

  for BRANCH in $(((git branch -r | grep -v "HEAD") || echo "") | sed "s/  //"); do
    LAST_COMMIT_INFO=$(git show --format="%ci;%cn" $BRANCH | head -n 1)
    LAST_COMMIT_TIME=$(echo "${LAST_COMMIT_INFO//;/\n}" | head -n 1)
    LAST_COMMIT_EPOCH=$(date -j -f "%Y-%m-%d %T %z" "$LAST_COMMIT_TIME" +%s)
    LAST_COMMIT_AUTHOR=$(echo "${LAST_COMMIT_INFO//;/\n}" | tail -n 1)
    if [ "$LAST_COMMIT_EPOCH" -lt "$COMPARE_TIME" ] && ( [ ! -n "$USER" ] || [ "$USER" = "$LAST_COMMIT_AUTHOR" ] ); then
      OUT_ARRAY+=("$(printf "%s\t%-25s\t%s" "$(date -j -f "%Y-%m-%d %T %z" "$LAST_COMMIT_TIME" "+%Y-%m-%d %H:%M")" "$LAST_COMMIT_AUTHOR" "$(echo $BRANCH | sed "s/origin\///")")")
    fi
  done

  OUT_ARRAY_LEN=${#OUT_ARRAY[@]}

  if [ "$OUT_ARRAY_LEN" -eq 0 ]; then
    echo "No branches with last commit more than $DAYS_AGO day/s ago."
  else
    echo "$(pluralize $OUT_ARRAY_LEN "branch" "branches") with last commit more than $(pluralize $DAYS_AGO "day" "days") ago:"
    printf "%-16s\t%-25s\t%s\n" "  Last Commit" "  Author" "  Branch"
    for ELEM in "${OUT_ARRAY[@]}"; do
      echo "$ELEM"
    done | sort
  fi
}

function clean_remotes {
  MERGE_BRANCH=master
  FETCH=true
  USER=""

  while [ $# -gt 0 ]; do
    KEY="$1"
    case $KEY in
        -m|--merge-branch)
          shift
          if [ $# -gt 0 ]; then
            MERGE_BRANCH=$1
          else
            echo "merge branch flag needs an argument!"
            exit 1
          fi
          ;;
        -u|--user)
          shift
          if [ $# -gt 0 ]; then
            if [ -n "$USER" ]; then
              echo "user already set, please use at most one of --user/-u/--me"
              exit 1
            else
              USER=$1
            fi
          else
            echo "user flag needs an argument!"
            exit 1
          fi
          ;;
        --me)
          if [ -n "$USER" ]; then
            echo "user already set, please use at most one of --user/-u/--me"
            exit 1
          else
            USER=$(git config user.name)
          fi
          ;;
        -n|--no-fetch) FETCH=false;;
        -*) echo "Unknown flag ${KEY:1}"; exit 1;;
        *) break;;
    esac
    shift
  done

  if [ "$FETCH" = true ]; then
    echo "Fetching\n"
    git fetch -q -p
  else
    echo "Not Fetching\n"
  fi

  BRANCHES=$((git branch -r --merged "origin/$MERGE_BRANCH" | sed "s/  origin\///" | grep -v HEAD | grep -v $MERGE_BRANCH) || echo "")
  while [ $# -gt 0 ]; do
    BRANCHES=$(echo "$BRANCHES" | grep -v "$1" || echo "")
    shift
  done

  REAL_BRANCHES=()
  OUT_ARRAY=()

  for BRANCH in $BRANCHES; do
    LAST_COMMIT_INFO=$(git show --format="%ci;%cn" origin/$BRANCH | head -n 1)
    LAST_COMMIT_TIME=$(echo "${LAST_COMMIT_INFO//;/\n}" | head -n 1)
    LAST_COMMIT_AUTHOR=$(echo "${LAST_COMMIT_INFO//;/\n}" | tail -n 1)
    if [ ! -n "$USER" ] || [ "$USER" = "$LAST_COMMIT_AUTHOR" ]; then
      REAL_BRANCHES+=("$BRANCH")
      OUT_ARRAY+=("$(printf "%s\t%-25s\t%s" "$(date -j -f "%Y-%m-%d %T %z" "$LAST_COMMIT_TIME" "+%Y-%m-%d %H:%M")" "$LAST_COMMIT_AUTHOR" "$(echo $BRANCH | sed "s/origin\///")")")
    fi
  done

  REAL_BRANCHES_LEN=${#REAL_BRANCHES[@]}

  if [ "$REAL_BRANCHES_LEN" -eq 0 ]; then
    echo "No branches to remove.\n"
  else
    echo "Branches that have been merged into $MERGE_BRANCH but have not been deleted:"
    printf "%-16s\t%-25s\t%s\n" "  Last Commit" "  Author" "  Branch"
    for ELEM in "${OUT_ARRAY[@]}"; do
      echo "$ELEM"
    done | sort
    echo ""

    while true; do
      read -p "Do you wish to delete all of these branches? (y/n) " yn
      case $yn in
        [Yy]* ) echo "${REAL_BRANCHES[@]}" | xargs git push --delete origin; break;;
        [Nn]* ) exit;;
        * ) echo "Please answer y or n.";;
      esac
    done
  fi
}

case $1 in
  clean_branches|clean_remotes|clean) shift; clean_remotes "$@";;
  old_branches|old_remotes|old) shift; old_branches "$@";;
  help|h|--help|-h) print_help;;
  *) print_help; exit 1;;
esac
